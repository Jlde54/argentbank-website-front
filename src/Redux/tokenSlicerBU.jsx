import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";

export const fetchToken = createAsyncThunk("fetchToken", async (credential) => {
    const request = await fetch('http://localhost:3001/api/v1/user/login', {
        method: 'POST',
        headers: {'Content-Type': 'application/json', 'accept': 'application/json'},
        body: JSON.stringify({credential})
        });
        const response = await request.data.data;
        sessionStorage.setItem('token', JSON.stringify(credential));
        return response;
})

export const fetchData = createAsyncThunk("fetchData", async (token) => {
    const data = await fetch('http://localhost:3001/api/v1/user/profile', {
        method: 'POST',
        headers: {'Content-Type': 'application/json', 'Authorization': 'Bearer' + token}
      })
    return data.json()
})

export const tokenSlice = createSlice({
    name: "token",
    initialState: {
        isLoading : false,
        value: null,
        error: null
    },
    // reducers: {
    //     getToken: (state, action) => {
    //         state.value = action.payload;
    //     },
    //     clearToken: (state, action) => {
    //         state.value = action.payload;
    //     },
    // },
    extraReducers: (builder) => {
        builder.addCase(fetchToken.pending, (state, action) => {
            state.isLoading = true;
            state.value = null;
            state.error = null;
        });
        builder.addCase(fetchToken.fulfilled, (state, action) => {
            state.isLoading = false;
            state.value = action.payload;
            state.error = null;
        });
        builder.addCase(fetchToken.rejected, (state, action) => {
            state.isLoading = false;
            state.value = null;
            state.error = action.error.message;
        });
        builder.addCase(fetchData.pending, (state, action) => {
            state.isLoading = true
        });
        builder.addCase(fetchData.fulfilled, (state, action) => {
            state.isLoading = false;
            state.value = action.payload
        });
        builder.addCase(fetchData.rejected, (state, action) => {
            state.error = false;
        });
    }
});
// The getToken and clearToken action creator are automatically generated by the createSlice function 
// and are exported in order to be used to create (dispatch) actions that update the firstName state in the Redux store. 
// export const { getToken, clearToken } = tokenSlice.actions;
// The reducer tokenSlice is exported
export default tokenSlice.reducer;